# -*- coding: utf-8 -*-
"""Descriptive and Predictive Analysis with Interactive Dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HOdqqpXCheTMMS4qvXXVI0EHiVmeOd-K
"""

!pip install pandas plotly dash jupyter-dash scikit-learn

import pandas as pd

# Load the sales dataset
url = '/SuperStoreOrders.csv'  # Change this URL if needed
df = pd.read_csv(url)

# Display the first few rows
df.head()

# Summary statistics
summary = df.describe()
print(summary)

import plotly.express as px

# 1. Sales over time
fig1 = px.line(df, x='discount', y='profit', title='Sales Over Time')
fig1.show()

# 2. Sales by Category
fig2 = px.bar(df, x='year', y='profit', title='Sales by Category')
fig2.show()

# 3. Sales Distribution
fig3 = px.histogram(df, x='profit', title='Sales Distribution')
fig3.show()

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

# Convert 'profit' to datetime
df['profit'] = pd.to_datetime(df['profit'])

# Convert dates to timestamp
df['profit'] = df['profit'].map(pd.Timestamp.timestamp)

# Define features (X) and target (y)
X = df[['profit', 'quantity', 'discount']]
y = df['shipping_cost']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Calculate the mean squared error
mse = mean_squared_error(y_test, y_pred)
print(f'Mean Squared Error: {mse}')

#Create an Interactive Dashboard
from jupyter_dash import JupyterDash
from dash import dcc, html, Input, Output

# Initialize the Dash app
app = JupyterDash(__name__)

# Define the layout of the dashboard
app.layout = html.Div([
    html.H1('Sales Analysis Dashboard'),
    dcc.Dropdown(
        id='profit-dropdown',
        options=[{'label': cat, 'value': cat} for cat in df['profit'].unique()],
        multi=True,
        value=[df['profit'].unique()[0]]  # Default value
    ),
    dcc.Graph(id='sales-time'),
    dcc.Graph(id='sales-profit'),
    dcc.Graph(id='sales-distribution'),
])

#Add Callbacks for Interactivity:
@app.callback(
    Output('sales-time', 'figure'),
    Output('sales-category', 'figure'),
    Output('sales-distribution', 'figure'),
    Input('category-dropdown', 'value')
)
def update_graph(selected_categories):
    filtered_df = df[df['Category'].isin(selected_categories)]

    # Sales Over Time
    sales_time_fig = px.line(filtered_df, x='OrderDate', y='Sales', title='Sales Over Time')

    # Sales by Category
    sales_category_fig = px.bar(filtered_df, x='Category', y='Sales', title='Sales by Category')

    # Sales Distribution
    sales_distribution_fig = px.histogram(filtered_df, x='Sales', title='Sales Distribution')

    return sales_time_fig, sales_category_fig, sales_distribution_fig

# Run the app
app.run_server(mode='inline')